package sender

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"slices"
	"strconv"

	"github.com/ad/telegram-delete-join-messages/data"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	towerStage = iota // Definition of the first name stage = 0
	zabavaStage
	roomStage
)

// ConversationHandler is a structure that manages conversation functions.
type ConversationHandler struct {
	active         map[int]bool            // a flag indicating whether the conversation is active
	currentStageId map[int]int             // the identifier of the active conversation stage
	stages         map[int]bot.HandlerFunc // a map of conversation stages
}

// NewConversationHandler returns a new instance of ConversationHandler.
func NewConversationHandler() *ConversationHandler {
	return &ConversationHandler{
		active:         make(map[int]bool),
		currentStageId: make(map[int]int),
		stages:         make(map[int]bot.HandlerFunc),
	}
}

// AddStage adds a conversation stage to the ConversationHandler.
func (c *ConversationHandler) AddStage(stageId int, hf bot.HandlerFunc) {
	c.stages[stageId] = hf
}

// SetActiveStage sets the active conversation stage.
// Invalid currentStageId is not checked because if the CallStage function encounters an invalid id,
// it will not process it, so the stageId is not checked.
// if stageId <= len(c.stages)
func (c *ConversationHandler) SetActiveStage(stageId int, userID int) {
	if a, ok := c.active[userID]; !ok || !a {
		c.active[userID] = true
	}

	c.currentStageId[userID] = stageId
}

// CallStage calls the function of the active conversation stage.
func (c *ConversationHandler) CallStage(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	if _, ok := c.active[int(update.Message.From.ID)]; ok {
		// hf = HandlerFunction
		if hf, ok := c.stages[c.currentStageId[int(update.Message.From.ID)]]; ok {
			hf(ctx, b, update)
		} else {
			log.Println("Error: Invalid stage id. No matching function found for the current stage id.")
		}
	}
}

// End ends the conversation.
func (c *ConversationHandler) End(userID int) {
	c.active[userID] = false
}

// Handle /start command to start getting the user's tower
func (s *Sender) startConversation(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	// check room presense in db
	vote, err := data.CheckVote(s.DB, update.Message.Chat.ID, update.Message.From.ID)
	if err != nil && err != sql.ErrNoRows {
		s.lgr.Info(fmt.Sprintf("startConversation CheckVote: %s", err.Error()))
	}

	if vote != "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚úÖ –í–∞—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏",
		})

		return
	}

	s.convHandler.SetActiveStage(towerStage, int(update.Message.From.ID)) //start the tower stage

	// Ask user to enter their name
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n\nüè¨ –í –∫–∞–∫–æ–π –±–∞—à–Ω–µ –≤—ã –∂–∏–≤–µ—Ç–µ?",
	})
}

// Handle the tower stage to get the user's tower
func (s *Sender) towerHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	allowedTowers := []string{
		"1", "2",
		"–±", "–ë", "–∫", "–ö",
		"–ø–µ—Ä–≤–æ–π", "–≤—Ç–æ—Ä–æ–π",
		"–ü–µ—Ä–≤–æ–π", "–í—Ç–æ—Ä–æ–π",
		"–ø–µ—Ä–≤–æ–≥–æ", "–≤—Ç–æ—Ä–æ–≥–æ",
		"–ü–µ—Ä–≤–æ–≥–æ", "–í—Ç–æ—Ä–æ–≥–æ",
		"–±–∞–π–∫–æ–Ω—É—Ä—Å–∫–∞—è", "–∫–æ—Ä–æ–ª–µ–≤–∞", "–∫–æ—Ä–æ–ª—ë–≤–∞",
		"–ë–∞–π–∫–æ–Ω—É—Ä—Å–∫–∞—è", "–ö–æ—Ä–æ–ª–µ–≤–∞", "–ö–æ—Ä–æ–ª—ë–≤–∞",
	}

	tower := update.Message.Text

	if !slices.Contains(allowedTowers, tower) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –í—ã –¥–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, —Ç–æ –≤–∞–º —Å—é–¥–∞ –Ω–µ –Ω–∞–¥–æ.",
		})

		return
	}

	s.convHandler.SetActiveStage(zabavaStage, int(update.Message.From.ID)) //change stage
	// s.convHandler.End() // end the conversation

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "‚úÖ –•–æ—Ä–æ—à–æ, –ø–æ—Ö–æ–∂–µ –º—ã —Å–æ—Å–µ–¥–∏...\n\nüë∂ –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º –¥–æ–º–µ?",
	})
}

// Handle the zabava stage to get the user's zabava
func (s *Sender) zabavaHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	allowedTowers := []string{
		"–∑–∞–±–∞–≤–∞", "–ó–∞–±–∞–≤–∞",
		"zabava", "Zabava",
		"–∑–∞–±–∞–≤–∞ —Å–∞–¥", "–ó–∞–±–∞–≤–∞ —Å–∞–¥",
	}

	tower := update.Message.Text

	if !slices.Contains(allowedTowers, tower) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –í—ã –¥–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, —Ç–æ –≤–∞–º —Å—é–¥–∞ –Ω–µ –Ω–∞–¥–æ.",
		})

		return
	}

	s.convHandler.SetActiveStage(roomStage, int(update.Message.From.ID)) //change stage to last name stage
	// s.convHandler.End() // end the conversation

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "‚úÖ –•–æ—Ä–æ—à–æ, –º—ã —Å–æ—Å–µ–¥–∏.\n\nüö™ –ù–∞–∑–æ–≤–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –±–æ–π—Ç–µ—Å—å, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –º–∏–º–æ).",
	})
}

// Handle the room stage to get the user's room
func (s *Sender) roomHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	// check room presense in db
	room := update.Message.Text

	vote, err := data.CheckVote(s.DB, update.Message.Chat.ID, update.Message.From.ID)
	if err != nil && err != sql.ErrNoRows {
		s.lgr.Info(fmt.Sprintf("roomHandler CheckVote(%s): %s", room, err.Error()))

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
		})

		return
	}

	if vote != "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚úÖ –í–∞—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏",
		})

		return
	}

	allowedRoomsMin := 1
	allowedRoomsMax := 344

	if roomInt, err := strconv.Atoi(room); err != nil || roomInt < allowedRoomsMin || roomInt > allowedRoomsMax {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã —É –Ω–∞—Å –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç.",
		})

		return
	}

	s.convHandler.End(int(update.Message.From.ID)) // end the conversation

	user_data := fmt.Sprintf("id %d %s %s %s", update.Message.From.ID, update.Message.From.FirstName, update.Message.From.LastName, update.Message.From.Username)

	err = data.AddVote(s.DB, update.Message.Chat.ID, update.Message.From.ID, room, user_data)
	if err != nil {
		s.lgr.Info(fmt.Sprintf("roomHandler AddVote (%s): %s", room, err.Error()))

		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "ü´∂üèª –°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª–∏",
	})
}

// Handle /cancel command to end the conversation
func (s *Sender) cancelConversation(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	// check if message is private
	if update.Message.Chat.Type != "private" {
		return
	}

	s.convHandler.End(int(update.Message.From.ID)) // end the conversation

	// Send a message to indicate the conversation has been cancelled
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "ü•∫ –î–µ–ª–æ –≤–∞—à–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑",
	})
}
